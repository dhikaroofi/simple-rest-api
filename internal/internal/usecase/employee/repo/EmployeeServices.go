// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/dhikaroofi/simple-rest-api/internal/common"

	employee "github.com/dhikaroofi/simple-rest-api/internal/usecase/employee"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeServices is an autogenerated mock type for the EmployeeServices type
type EmployeeServices struct {
	mock.Mock
}

type EmployeeServices_Expecter struct {
	mock *mock.Mock
}

func (_m *EmployeeServices) EXPECT() *EmployeeServices_Expecter {
	return &EmployeeServices_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *EmployeeServices) Create(ctx context.Context, req employee.CreateOrUpdateEmployeeReq) (employee.Resp, error) {
	ret := _m.Called(ctx, req)

	var r0 employee.Resp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, employee.CreateOrUpdateEmployeeReq) (employee.Resp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, employee.CreateOrUpdateEmployeeReq) employee.Resp); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(employee.Resp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, employee.CreateOrUpdateEmployeeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmployeeServices_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type EmployeeServices_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req employee.CreateOrUpdateEmployeeReq
func (_e *EmployeeServices_Expecter) Create(ctx interface{}, req interface{}) *EmployeeServices_Create_Call {
	return &EmployeeServices_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *EmployeeServices_Create_Call) Run(run func(ctx context.Context, req employee.CreateOrUpdateEmployeeReq)) *EmployeeServices_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(employee.CreateOrUpdateEmployeeReq))
	})
	return _c
}

func (_c *EmployeeServices_Create_Call) Return(resp employee.Resp, err error) *EmployeeServices_Create_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *EmployeeServices_Create_Call) RunAndReturn(run func(context.Context, employee.CreateOrUpdateEmployeeReq) (employee.Resp, error)) *EmployeeServices_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EmployeeServices) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmployeeServices_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type EmployeeServices_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *EmployeeServices_Expecter) Delete(ctx interface{}, id interface{}) *EmployeeServices_Delete_Call {
	return &EmployeeServices_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *EmployeeServices_Delete_Call) Run(run func(ctx context.Context, id string)) *EmployeeServices_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EmployeeServices_Delete_Call) Return(err error) *EmployeeServices_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EmployeeServices_Delete_Call) RunAndReturn(run func(context.Context, string) error) *EmployeeServices_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *EmployeeServices) Get(ctx context.Context, id string) (employee.Resp, error) {
	ret := _m.Called(ctx, id)

	var r0 employee.Resp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (employee.Resp, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) employee.Resp); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(employee.Resp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmployeeServices_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type EmployeeServices_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *EmployeeServices_Expecter) Get(ctx interface{}, id interface{}) *EmployeeServices_Get_Call {
	return &EmployeeServices_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *EmployeeServices_Get_Call) Run(run func(ctx context.Context, id string)) *EmployeeServices_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EmployeeServices_Get_Call) Return(resp employee.Resp, err error) *EmployeeServices_Get_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *EmployeeServices_Get_Call) RunAndReturn(run func(context.Context, string) (employee.Resp, error)) *EmployeeServices_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, queryCommon
func (_m *EmployeeServices) GetList(ctx context.Context, queryCommon *common.QueryPagination) (employee.ListEmployeeResp, error) {
	ret := _m.Called(ctx, queryCommon)

	var r0 employee.ListEmployeeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) (employee.ListEmployeeResp, error)); ok {
		return rf(ctx, queryCommon)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) employee.ListEmployeeResp); ok {
		r0 = rf(ctx, queryCommon)
	} else {
		r0 = ret.Get(0).(employee.ListEmployeeResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.QueryPagination) error); ok {
		r1 = rf(ctx, queryCommon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmployeeServices_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type EmployeeServices_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - queryCommon *common.QueryPagination
func (_e *EmployeeServices_Expecter) GetList(ctx interface{}, queryCommon interface{}) *EmployeeServices_GetList_Call {
	return &EmployeeServices_GetList_Call{Call: _e.mock.On("GetList", ctx, queryCommon)}
}

func (_c *EmployeeServices_GetList_Call) Run(run func(ctx context.Context, queryCommon *common.QueryPagination)) *EmployeeServices_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*common.QueryPagination))
	})
	return _c
}

func (_c *EmployeeServices_GetList_Call) Return(resp employee.ListEmployeeResp, err error) *EmployeeServices_GetList_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *EmployeeServices_GetList_Call) RunAndReturn(run func(context.Context, *common.QueryPagination) (employee.ListEmployeeResp, error)) *EmployeeServices_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, req
func (_m *EmployeeServices) Update(ctx context.Context, id string, req employee.CreateOrUpdateEmployeeReq) (employee.Resp, error) {
	ret := _m.Called(ctx, id, req)

	var r0 employee.Resp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, employee.CreateOrUpdateEmployeeReq) (employee.Resp, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, employee.CreateOrUpdateEmployeeReq) employee.Resp); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Get(0).(employee.Resp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, employee.CreateOrUpdateEmployeeReq) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmployeeServices_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type EmployeeServices_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - req employee.CreateOrUpdateEmployeeReq
func (_e *EmployeeServices_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *EmployeeServices_Update_Call {
	return &EmployeeServices_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *EmployeeServices_Update_Call) Run(run func(ctx context.Context, id string, req employee.CreateOrUpdateEmployeeReq)) *EmployeeServices_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(employee.CreateOrUpdateEmployeeReq))
	})
	return _c
}

func (_c *EmployeeServices_Update_Call) Return(resp employee.Resp, err error) *EmployeeServices_Update_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *EmployeeServices_Update_Call) RunAndReturn(run func(context.Context, string, employee.CreateOrUpdateEmployeeReq) (employee.Resp, error)) *EmployeeServices_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmployeeServices creates a new instance of EmployeeServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeServices {
	mock := &EmployeeServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
