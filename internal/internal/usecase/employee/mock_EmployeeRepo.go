// Code generated by mockery v2.23.4. DO NOT EDIT.

package employee

import (
	context "context"

	common "github.com/dhikaroofi/simple-rest-api/internal/common"

	employee "github.com/dhikaroofi/simple-rest-api/internal/usecase/employee"

	mock "github.com/stretchr/testify/mock"
)

// MockEmployeeRepo is an autogenerated mock type for the RepoInterfaces type
type MockEmployeeRepo struct {
	mock.Mock
}

type MockEmployeeRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmployeeRepo) EXPECT() *MockEmployeeRepo_Expecter {
	return &MockEmployeeRepo_Expecter{mock: &_m.Mock}
}

// CheckIfExist provides a mock function with given fields: ctx, id
func (_m *MockEmployeeRepo) CheckIfExist(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmployeeRepo_CheckIfExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfExist'
type MockEmployeeRepo_CheckIfExist_Call struct {
	*mock.Call
}

// CheckIfExist is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockEmployeeRepo_Expecter) CheckIfExist(ctx interface{}, id interface{}) *MockEmployeeRepo_CheckIfExist_Call {
	return &MockEmployeeRepo_CheckIfExist_Call{Call: _e.mock.On("CheckIfExist", ctx, id)}
}

func (_c *MockEmployeeRepo_CheckIfExist_Call) Run(run func(ctx context.Context, id string)) *MockEmployeeRepo_CheckIfExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEmployeeRepo_CheckIfExist_Call) Return(err error) *MockEmployeeRepo_CheckIfExist_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmployeeRepo_CheckIfExist_Call) RunAndReturn(run func(context.Context, string) error) *MockEmployeeRepo_CheckIfExist_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, ent
func (_m *MockEmployeeRepo) Create(ctx context.Context, ent *employee.Employee) error {
	ret := _m.Called(ctx, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *employee.Employee) error); ok {
		r0 = rf(ctx, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmployeeRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockEmployeeRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - ent *employee.Employee
func (_e *MockEmployeeRepo_Expecter) Create(ctx interface{}, ent interface{}) *MockEmployeeRepo_Create_Call {
	return &MockEmployeeRepo_Create_Call{Call: _e.mock.On("Create", ctx, ent)}
}

func (_c *MockEmployeeRepo_Create_Call) Run(run func(ctx context.Context, ent *employee.Employee)) *MockEmployeeRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*employee.Employee))
	})
	return _c
}

func (_c *MockEmployeeRepo_Create_Call) Return(err error) *MockEmployeeRepo_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmployeeRepo_Create_Call) RunAndReturn(run func(context.Context, *employee.Employee) error) *MockEmployeeRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockEmployeeRepo) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmployeeRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockEmployeeRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockEmployeeRepo_Expecter) Delete(ctx interface{}, id interface{}) *MockEmployeeRepo_Delete_Call {
	return &MockEmployeeRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockEmployeeRepo_Delete_Call) Run(run func(ctx context.Context, id string)) *MockEmployeeRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEmployeeRepo_Delete_Call) Return(err error) *MockEmployeeRepo_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmployeeRepo_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockEmployeeRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockEmployeeRepo) Get(ctx context.Context, id string) (employee.Employee, error) {
	ret := _m.Called(ctx, id)

	var r0 employee.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (employee.Employee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) employee.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEmployeeRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEmployeeRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockEmployeeRepo_Expecter) Get(ctx interface{}, id interface{}) *MockEmployeeRepo_Get_Call {
	return &MockEmployeeRepo_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockEmployeeRepo_Get_Call) Run(run func(ctx context.Context, id string)) *MockEmployeeRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEmployeeRepo_Get_Call) Return(result employee.Employee, err error) *MockEmployeeRepo_Get_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockEmployeeRepo_Get_Call) RunAndReturn(run func(context.Context, string) (employee.Employee, error)) *MockEmployeeRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, commonQuery
func (_m *MockEmployeeRepo) GetList(ctx context.Context, commonQuery *common.QueryPagination) ([]employee.Employee, error) {
	ret := _m.Called(ctx, commonQuery)

	var r0 []employee.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) ([]employee.Employee, error)); ok {
		return rf(ctx, commonQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) []employee.Employee); ok {
		r0 = rf(ctx, commonQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]employee.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.QueryPagination) error); ok {
		r1 = rf(ctx, commonQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEmployeeRepo_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockEmployeeRepo_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - commonQuery *common.QueryPagination
func (_e *MockEmployeeRepo_Expecter) GetList(ctx interface{}, commonQuery interface{}) *MockEmployeeRepo_GetList_Call {
	return &MockEmployeeRepo_GetList_Call{Call: _e.mock.On("GetList", ctx, commonQuery)}
}

func (_c *MockEmployeeRepo_GetList_Call) Run(run func(ctx context.Context, commonQuery *common.QueryPagination)) *MockEmployeeRepo_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*common.QueryPagination))
	})
	return _c
}

func (_c *MockEmployeeRepo_GetList_Call) Return(result []employee.Employee, err error) *MockEmployeeRepo_GetList_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockEmployeeRepo_GetList_Call) RunAndReturn(run func(context.Context, *common.QueryPagination) ([]employee.Employee, error)) *MockEmployeeRepo_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, ent
func (_m *MockEmployeeRepo) Update(ctx context.Context, id string, ent *employee.Employee) error {
	ret := _m.Called(ctx, id, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *employee.Employee) error); ok {
		r0 = rf(ctx, id, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmployeeRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockEmployeeRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - ent *employee.Employee
func (_e *MockEmployeeRepo_Expecter) Update(ctx interface{}, id interface{}, ent interface{}) *MockEmployeeRepo_Update_Call {
	return &MockEmployeeRepo_Update_Call{Call: _e.mock.On("Update", ctx, id, ent)}
}

func (_c *MockEmployeeRepo_Update_Call) Run(run func(ctx context.Context, id string, ent *employee.Employee)) *MockEmployeeRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*employee.Employee))
	})
	return _c
}

func (_c *MockEmployeeRepo_Update_Call) Return(err error) *MockEmployeeRepo_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmployeeRepo_Update_Call) RunAndReturn(run func(context.Context, string, *employee.Employee) error) *MockEmployeeRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmployeeRepo creates a new instance of MockEmployeeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmployeeRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmployeeRepo {
	mock := &MockEmployeeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
