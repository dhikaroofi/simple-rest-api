// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/dhikaroofi/simple-rest-api/internal/common"

	employee "github.com/dhikaroofi/simple-rest-api/internal/usecase/employee"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeServicesInterfaces is an autogenerated mock type for the EmployeeServicesInterfaces type
type EmployeeServicesInterfaces struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *EmployeeServicesInterfaces) Create(ctx context.Context, req employee.CreateOrUpdateEmployeeReq) (employee.Resp, error) {
	ret := _m.Called(ctx, req)

	var r0 employee.Resp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, employee.CreateOrUpdateEmployeeReq) (employee.Resp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, employee.CreateOrUpdateEmployeeReq) employee.Resp); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(employee.Resp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, employee.CreateOrUpdateEmployeeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EmployeeServicesInterfaces) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *EmployeeServicesInterfaces) Get(ctx context.Context, id string) (employee.Resp, error) {
	ret := _m.Called(ctx, id)

	var r0 employee.Resp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (employee.Resp, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) employee.Resp); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(employee.Resp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, queryCommon
func (_m *EmployeeServicesInterfaces) GetList(ctx context.Context, queryCommon *common.QueryPagination) (employee.ListEmployeeResp, error) {
	ret := _m.Called(ctx, queryCommon)

	var r0 employee.ListEmployeeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) (employee.ListEmployeeResp, error)); ok {
		return rf(ctx, queryCommon)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) employee.ListEmployeeResp); ok {
		r0 = rf(ctx, queryCommon)
	} else {
		r0 = ret.Get(0).(employee.ListEmployeeResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.QueryPagination) error); ok {
		r1 = rf(ctx, queryCommon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, req
func (_m *EmployeeServicesInterfaces) Update(ctx context.Context, id string, req employee.CreateOrUpdateEmployeeReq) (employee.Resp, error) {
	ret := _m.Called(ctx, id, req)

	var r0 employee.Resp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, employee.CreateOrUpdateEmployeeReq) (employee.Resp, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, employee.CreateOrUpdateEmployeeReq) employee.Resp); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Get(0).(employee.Resp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, employee.CreateOrUpdateEmployeeReq) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeServicesInterfaces creates a new instance of EmployeeServicesInterfaces. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeServicesInterfaces(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeServicesInterfaces {
	mock := &EmployeeServicesInterfaces{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
