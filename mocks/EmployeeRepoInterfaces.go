// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/dhikaroofi/simple-rest-api/internal/common"

	employee "github.com/dhikaroofi/simple-rest-api/internal/usecase/employee"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepoInterfaces is an autogenerated mock type for the EmployeeRepoInterfaces type
type EmployeeRepoInterfaces struct {
	mock.Mock
}

// CheckIfExist provides a mock function with given fields: ctx, id
func (_m *EmployeeRepoInterfaces) CheckIfExist(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, ent
func (_m *EmployeeRepoInterfaces) Create(ctx context.Context, ent *employee.Employee) error {
	ret := _m.Called(ctx, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *employee.Employee) error); ok {
		r0 = rf(ctx, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EmployeeRepoInterfaces) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *EmployeeRepoInterfaces) Get(ctx context.Context, id string) (employee.Employee, error) {
	ret := _m.Called(ctx, id)

	var r0 employee.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (employee.Employee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) employee.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, commonQuery
func (_m *EmployeeRepoInterfaces) GetList(ctx context.Context, commonQuery *common.QueryPagination) ([]employee.Employee, error) {
	ret := _m.Called(ctx, commonQuery)

	var r0 []employee.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) ([]employee.Employee, error)); ok {
		return rf(ctx, commonQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.QueryPagination) []employee.Employee); ok {
		r0 = rf(ctx, commonQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]employee.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.QueryPagination) error); ok {
		r1 = rf(ctx, commonQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, ent
func (_m *EmployeeRepoInterfaces) Update(ctx context.Context, id string, ent *employee.Employee) error {
	ret := _m.Called(ctx, id, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *employee.Employee) error); ok {
		r0 = rf(ctx, id, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmployeeRepoInterfaces creates a new instance of EmployeeRepoInterfaces. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeRepoInterfaces(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeRepoInterfaces {
	mock := &EmployeeRepoInterfaces{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
